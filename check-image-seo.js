const fs = require('fs');
const path = require('path');

const folderToCheck = './src/components';
const outputFile = './seo-check-report.md';

const imageTagRegex = /<Image([^>]*)\/>/g;
const backgroundDivRegex = /<div[^>]+backgroundImage[^>]+>/g;

const checkAlt = props => /alt\s*=/.test(props);
const checkLoading = props => /loading\s*=\s*["']lazy["']/.test(props);
const checkPriority = props => /priority\s*=\s*{?\s*true\s*}?/.test(props);

let report = `# üßæ B√°o c√°o ki·ªÉm tra SEO h√¨nh ·∫£nh\n\n> Ng√†y ki·ªÉm tra: ${new Date().toLocaleString()}\n\n`;

function checkFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const fileName = path.relative('.', filePath);
    let foundIssues = false;

    const matches = [...content.matchAll(imageTagRegex)];
    const bgDivs = [...content.matchAll(backgroundDivRegex)];

    if (matches.length === 0 && bgDivs.length === 0) return;

    report += `## üìÑ File: \`${fileName}\`\n`;

    if (matches.length > 0) {
        report += `- T√¨m th·∫•y **${matches.length}** th·∫ª \`<Image />\`\n`;

        matches.forEach((match, i) => {
            const props = match[1];
            let issues = [];

            if (!checkAlt(props)) issues.push('‚ùå Thi·∫øu `alt`');
            if (!checkPriority(props) && !checkLoading(props)) issues.push('‚ùå Thi·∫øu `loading="lazy"` ho·∫∑c `priority`');

            if (issues.length > 0) {
                foundIssues = true;
                report += `  - ·∫¢nh ${i + 1}: ${issues.join(', ')}\n`;
            }
        });
    }

    if (bgDivs.length > 0) {
        let divCounter = 0;
        bgDivs.forEach(divMatch => {
            divCounter++;
            const divCode = divMatch[0];
            const hasLabel = /aria-label\s*=/.test(divCode) || divCode.includes('sr-only');

            if (!hasLabel) {
                foundIssues = true;
                report += `- ‚ùå \`<div>\` ${divCounter} d√πng \`backgroundImage\` nh∆∞ng **kh√¥ng c√≥** \`aria-label\` ho·∫∑c \`.sr-only\`\n`;
            } else {
                report += `- ‚úÖ \`<div>\` ${divCounter} c√≥ m√¥ t·∫£ thay th·∫ø.\n`;
            }
        });
    }

    if (!foundIssues) {
        report += `- ‚úÖ Kh√¥ng ph√°t hi·ªán l·ªói.\n`;
    }

    report += `\n`;
}

function walkDir(dirPath) {
    if (!fs.existsSync(dirPath)) return;

    fs.readdirSync(dirPath).forEach(file => {
        const fullPath = path.join(dirPath, file);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
            walkDir(fullPath);
        } else if (/\.(js|jsx|tsx)$/.test(file)) {
            checkFile(fullPath);
        }
    });
}

// B·∫Øt ƒë·∫ßu ki·ªÉm tra
console.log(`üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra SEO h√¨nh ·∫£nh trong th∆∞ m·ª•c: ${folderToCheck}`);
walkDir(folderToCheck);

// Xu·∫•t ra file
fs.writeFileSync(outputFile, report, 'utf8');
console.log(`‚úÖ ƒê√£ xu·∫•t b√°o c√°o v√†o: ${outputFile}`);
